Create Table Command:-

create table agent_login_v1
    > (sl_no int,agent string,date string,loggin_time string,logout_time string,duration string)
    > row format delimited
    > fields terminated by ','
    > tblproperties("skip.header.line.count"="1");

create table agent_performance
    > (sl_no int,date string,agent_name string,total_chat int,average_response_time timestamp,avarage_resolution_time timestamp,average_rating float,total_feedback int)
    > row format delimited
    > fields terminated by ','
    > tblproperties("skip.header.line.count"="1");

load Data Into Table:-

load data local inpath 'file:///tmp/hive_data/AgentLogingReport.csv' into table agent_login_v1;

load data local inpath 'file:///tmp/hive_data1/AgentPerformance.csv' into table agent_performance;

to show the Schema:

describe agent_login_v1;

describe agent_performance;

3. List of all agents' names.

select agent from agent_login_v1;

4. Find out agent average rating.

 select avg(average_rating) as Avg_rating from agent_performance_v1;

5. Total working days for each agents

 select agent,count(date) from agent_login_v1 group by agent;

6. Total query that each agent have taken 

select agent_name,count(total_chat) as total_query from agent_performance_v1 group by agent_name;

7. Total Feedback that each agent have received 

 select agent_name,count(total_feedback) as total_feedback from agent_performance_v1 group by agent_name;

8. Agent name who have average rating between 3.5 to 4

 select agent_name,average_rating
    > from agent_performance_v1
    > where average_rating between 3.5 and 4;

9. Agent name who have rating less than 3.5

select distnict agent_name from agent_performance_v1 where average_rating <3.5;

10. Agent name who have rating more than 4.5.

select distinct agent_name from agent_performance_v1 where average_rating > 4.5;

11. How many feedback agents have received more than 4.5 average.

 select count(distinct(agent_name)) as number_of_agent from agent_performance_v1 where average_rating>4.5;

14. Find the number of chat on which they have received a feedback

 select total_feedback, sum(total_chat) as number_of_chat from agent_performance where total_feedback !=0 group by total_feedback ;


15. Perform inner join, left join and right join based on the agent column and after joining the table export that data into your local system.

inner join->hive> insert overwrite local directory '/tmp/hive_class_output'
    > row format delimited
    > fields terminated by ','
    > select * from agent_login_v1 s1 inner join agent_performance_v1 s2 on s1.agent=s2.agent_name;
left join->hive> insert overwrite local directory '/tmp/hive_class_output'
    > row format delimited
    > fields terminated by ','
    > select * from agent_login_v1 s1 inner join agent_performance_v1 s2 on s1.agent=s2.agent_name;
right join->hive> insert overwrite local directory '/tmp/hive_class_output'
    > row format delimited
    > fields terminated by ','
    > select * from agent_login_v1 s1 inner join agent_performance_v1 s2 on s1.agent=s2.agent_name;

17. Perform partitioning on top of the agent column and then on top of that perform bucketing for each partitioning.


17. Perform partitioning on top of the agent column and then on top of that perform bucketing for each partitioning.

create table agent_login_bucket
    > (sl_no int,date string,login_time string,logout_time string,duration string)
    > partitioned by (agent string)
    > clustered by (sl_no)
    > sorted by (sl_no) into 2 buckets;

